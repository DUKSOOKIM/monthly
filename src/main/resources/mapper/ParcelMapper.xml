<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.monthly.mapper.ParcelMapper">
    <select id="selectParcelList" resultType="parcelVo">
    SELECT PARCEL_NUMBER, PARCEL_DATE, PARCEL_STATUS, PARCEL_INVOICE, PARCEL_COMPANY,
        DELIVERY_ADDRESS1, DELIVERY_ADDRESS2, DELIVERY_POSTCODE, PAYMENT_PRICE, PAYMENT_STATUS,
        PRODUCT_NAME, PRODUCT_OPTION, USER_NAME, USER_PHONE_NUMBER
        FROM(
            SELECT ROWNUM AS RNUM, PARCEL_NUMBER, PARCEL_DATE, PARCEL_STATUS, PARCEL_INVOICE, PARCEL_COMPANY,
            DELIVERY_ADDRESS1, DELIVERY_ADDRESS2, DELIVERY_POSTCODE, PAYMENT_PRICE, PAYMENT_STATUS,
            PRODUCT_NAME, PRODUCT_OPTION, USER_NAME, USER_PHONE_NUMBER

            FROM(
                SELECT PARCEL_NUMBER, PARCEL_DATE, PARCEL_STATUS, PARCEL_INVOICE, PARCEL_COMPANY,
                DELIVERY_ADDRESS1, DELIVERY_ADDRESS2, DELIVERY_POSTCODE, PAYMENT_PRICE, PAYMENT_STATUS,
                PRODUCT_NAME, PRODUCT_OPTION, USER_NAME, USER_PHONE_NUMBER
                FROM MONTHLY_PARCEL P
                 JOIN MONTHLY_PAYMENT PM on P.PAYMENT_NUMBER = PM.PAYMENT_NUMBER
                 JOIN MONTHLY_PRODUCT PR ON PM.PRODUCT_NUMBER = PR.PRODUCT_NUMBER AND BRAND_NUMBER = #{brandNumber}
                 JOIN MONTHLY_USER U on PM.USER_NUMBER = U.USER_NUMBER
        <trim prefix="WHERE" prefixOverrides="AND">
            <choose>
                <when test="'parcel-number'.equals(searchVo.searchSelect) and !''.equals(searchVo.searchInput)">
                    PARCEL_NUMBER = #{searchVo.searchInput}
                </when>
                <when test="'user-name'.equals(searchVo.searchSelect)">
                    USER_NAME LIKE '%' || #{searchVo.searchInput} || '%'
                </when>
                <when test="'product-name'.equals(searchVo.searchSelect)">
                    PRODUCT_NAME LIKE '%' || #{searchVo.searchInput} || '%'
                </when>
            </choose>
            <choose>
                <when test="'today'.equals(searchVo.period)">
                    AND TRUNC(PARCEL_DATE) = TRUNC(SYSDATE)
                </when>
                <when test="'yesterday'.equals(searchVo.period)">
                    AND TRUNC(PARCEL_DATE) = TRUNC(SYSDATE)-1
                </when>
                <when test="'1month'.equals(searchVo.period)">
                    AND P.PARCEL_DATE >= TRUNC(SYSDATE) - INTERVAL '1' MONTH
                </when>
                <when test="'3month'.equals(searchVo.period)">
                    AND P.PARCEL_DATE >= TRUNC(SYSDATE) - INTERVAL '3' MONTH
                </when>
            </choose>

            <if test="!'all'.equals(searchVo.productStatus) and !''.equals(searchVo.productStatus)">
                AND PARCEL_STATUS = TO_NUMBER(#{searchVo.productStatus})
            </if>
        </trim>
        ORDER BY PARCEL_DATE) S1
        <![CDATA[
             WHERE ROWNUM <= #{criteria.page}*#{criteria.amount}
    ]]>
        )S2
        WHERE RNUM > (#{criteria.page}-1)*#{criteria.amount}
    </select>

    <select id="selectParcelTotal" resultType="_int">
        SELECT COUNT(PARCEL_NUMBER)
        FROM MONTHLY_PARCEL P
        JOIN MONTHLY_PAYMENT PM on P.PAYMENT_NUMBER = PM.PAYMENT_NUMBER
        JOIN MONTHLY_PRODUCT PR ON PM.PRODUCT_NUMBER = PR.PRODUCT_NUMBER AND BRAND_NUMBER = #{brandNumber}
        JOIN MONTHLY_USER U on PM.USER_NUMBER = U.USER_NUMBER
            <trim prefix="WHERE" prefixOverrides="AND">
                <choose>
                    <when test="'parcel-number'.equals(searchVo.searchSelect) and !''.equals(searchVo.searchInput)">
                        PARCEL_NUMBER = #{searchVo.searchInput}
                    </when>
                    <when test="'user-name'.equals(searchVo.searchSelect)">
                        USER_NAME LIKE '%' || #{searchVo.searchInput} || '%'
                    </when>
                    <when test="'product-name'.equals(searchVo.searchSelect)">
                        PRODUCT_NAME LIKE '%' || #{searchVo.searchInput} || '%'
                    </when>
                </choose>
                <choose>
                    <when test="'today'.equals(searchVo.period)">
                        AND TRUNC(PARCEL_DATE) = TRUNC(SYSDATE)
                    </when>
                    <when test="'yesterday'.equals(searchVo.period)">
                        AND TRUNC(PARCEL_DATE) = TRUNC(SYSDATE)-1
                    </when>
                    <when test="'1month'.equals(searchVo.period)">
                        AND P.PARCEL_DATE >= TRUNC(SYSDATE) - INTERVAL '1' MONTH
                    </when>
                    <when test="'3month'.equals(searchVo.period)">
                        AND P.PARCEL_DATE >= TRUNC(SYSDATE) - INTERVAL '3' MONTH
                    </when>
                </choose>
                <if test="!'all'.equals(searchVo.productStatus) and !''.equals(searchVo.productStatus)">
                    AND PARCEL_STATUS = TO_NUMBER(#{searchVo.productStatus})
                </if>
            </trim>
    </select>

<!--    리스트에서 배송정보 수정저장-->
    <update id="updateParcel">
        UPDATE MONTHLY_PARCEL
        SET PARCEL_STATUS = #{parcelStatus},
            PARCEL_COMPANY = #{parcelCompany},
            PARCEL_INVOICE = #{parcelInvoice}
        WHERE PARCEL_NUMBER = #{parcelNumber}
    </update>

</mapper>