<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.monthly.mapper.AdminMapper">
    <!--판매자 검색 인서트 -->
    <insert id="insert">
        <selectKey keyProperty="sellerNumber" order="BEFORE" resultType="long">
            SELECT SEQ_SELLER.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO MONTHLY_SELLER(SELLER_NUMBER, SELLER_NAME, SELLER_ID, SELLER_PASSWORD, SELLER_PHONE_NUMBER, SELLER_POSTCODE,SELLER_ADDRESS1, SELLER_ADDRESS2,
        SELLER_EMAIL, SELLER_CONTENTS, SELLER_COMPANY_REGISTER_NUMBER)
        VALUES (#{sellerNumber},#{sellerName},#{sellerId},#{sellerPassword},#{sellerPhoneNumber},#{sellerPostcode},#{sellerAddress1}, #{sellerAddress2},#{sellerEmail},#{sellerContents},#{sellerCompanyRegisterNumber})
    </insert>
    <!--상품검색 테스트 인서트 -->
    <insert id="insertProduct">
        <selectKey keyProperty="productNumber" order="BEFORE" resultType="long">
            SELECT SEQ_PRODUCT.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO MONTHLY_PRODUCT (PRODUCT_NUMBER, PRODUCT_NAME, PRODUCT_STATUS, BRAND_NUMBER, PRODUCT_REGISTER_DATE)
        VALUES (#{productNumber}, #{productName}, #{productStatus},
        (SELECT B.BRAND_NUMBER
        FROM MONTHLY_BRAND B
        LEFT JOIN MONTHLY_SELLER S ON B.SELLER_NUMBER = S.SELLER_NUMBER
        WHERE B.BRAND_NAME = #{brandName}),
        #{productRegisterDate})
        </insert>
<!--    관리자 로그인-->
    <select id="findAdminNumber" resultType="long" >
        SELECT ADMIN_NUMBER
        FROM MONTHLY_ADMIN
        WHERE ADMIN_ID =#{adminId} and ADMIN_PASSWORD=#{adminPassword}
    </select>

    <select id="sellerApplication" resultType="adminChartVo">
        SELECT TO_CHAR(b.dt, 'YYYY-MM') AS SELLER_REGISTER_DATE
        , NVL(SUM(a.REGISTRATION_COUNT), 0) REGISTRATION_COUNT
        FROM ( SELECT TO_CHAR(SELLER_REGISTER_DATE, 'YYYY-MM-DD') AS SELLER_REGISTER_DATE
        , COUNT(*) REGISTRATION_COUNT
        FROM MONTHLY_SELLER
        WHERE SELLER_REGISTER_DATE BETWEEN TO_DATE('2023-01-01', 'YYYY-MM-DD')
        AND TO_DATE('2023-12-31', 'YYYY-MM-DD')
        GROUP BY SELLER_REGISTER_DATE
        ) a
        , ( SELECT TO_DATE('2023-01-01','YYYY-MM-DD') + LEVEL - 1 AS dt
        FROM dual
        <![CDATA[
            CONNECT BY LEVEL <= (TO_DATE('2023-12-31','YYYY-MM-DD') - TO_DATE('2023-01-01','YYYY-MM-DD') + 1)
             ]]>
        ) b
        WHERE b.dt = a.SELLER_REGISTER_DATE(+)
        GROUP BY TO_CHAR(b.dt, 'YYYY-MM')
        ORDER BY TO_CHAR(b.dt, 'YYYY-MM')
    </select>

    <select id="paymentCount" resultType="adminChartVo">
        SELECT TO_CHAR(b.dt, 'YYYY-MM') AS PAYMENT_DATE,
        NVL(SUM(a.PAYMENT_PRICE), 0) AS PAYMENT_PRICE_COUNT
        FROM (
        SELECT TO_CHAR(PAYMENT_DATE, 'YYYY-MM') AS PAYMENT_DATE,
        PAYMENT_PRICE,
        PAYMENT_STATUS
        FROM MONTHLY_PAYMENT
        WHERE PAYMENT_STATUS = 1
        AND PAYMENT_DATE BETWEEN TO_DATE('2023-01-01', 'YYYY-MM-DD') AND TO_DATE('2023-12-31', 'YYYY-MM-DD')
        ) a
        RIGHT JOIN (
        SELECT TO_DATE('2023-' || LPAD(LEVEL, 2, '0'), 'YYYY-MM') AS dt
        FROM dual
        <![CDATA[
            CONNECT BY LEVEL <= 12
              ]]>
        ) b ON TO_CHAR(b.dt, 'YYYY-MM') = a.PAYMENT_DATE
        GROUP BY TO_CHAR(b.dt, 'YYYY-MM')
        ORDER BY TO_CHAR(b.dt, 'YYYY-MM')
    </select>

<!--판매자 검색 기능-->
    <select id="selectSeller" resultType="sellerDto">
        SELECT * FROM MONTHLY_SELLER
        <where>
            <trim prefixOverrides="AND">
            <if test="searchInput != ''">
                <if test='searchSelect.equals("seller-number")'>
                    SELLER_NUMBER = #{searchInput}
                </if>
                <if test='searchSelect.equals("seller-name")'>
                    SELLER_NAME LIKE '%' || #{searchInput} || '%'
                </if>
                <if test='searchSelect.equals("seller-id")'>
                    SELLER_ID LIKE '%' || #{searchInput} || '%'
                </if>
            </if>
            <trim prefix="and">
                    <if test='"today".equals(period)'>
                        TRUNC(SELLER_REGISTER_DATE) = TRUNC(SYSDATE)
                    </if>
                    <if test='"yesterday".equals(period)'>
                        TRUNC(SELLER_REGISTER_DATE) = TRUNC(SYSDATE) - 1
                    </if>
            </trim>
            </trim>
        </where>
        ORDER BY SELLER_REGISTER_DATE DESC
    </select>
<!--상품 검색 기능-->
    <select id="searchProduct" resultType="productVo">
        SELECT P.PRODUCT_NUMBER, P.PRODUCT_NAME, P.PRODUCT_STATUS, B.BRAND_NAME, P.PRODUCT_REGISTER_DATE, S.SELLER_PHONE_NUMBER, S.SELLER_EMAIL, S.SELLER_NAME
        FROM MONTHLY_PRODUCT P
                 LEFT OUTER JOIN MONTHLY_BRAND B ON P.BRAND_NUMBER = B.BRAND_NUMBER
                 LEFT OUTER JOIN MONTHLY_SELLER S ON B.SELLER_NUMBER = S.SELLER_NUMBER
        <where>
            <if test="searchInput != ''">
                <choose>
                    <when test="searchSelect == 'goods-number'">
                        P.PRODUCT_NUMBER = #{searchInput}
                    </when>
                    <when test="searchSelect == 'brand-name'">
                        B.BRAND_NAME LIKE '%' ||#{searchInput}|| '%'
                    </when>
                    <when test="searchSelect == 'goods-name'">
                        P.PRODUCT_NAME LIKE '%' || #{searchInput} || '%'
                    </when>
                </choose>
            </if>
        </where>
    </select>

    <!--판매자의 브랜드,구독자 조회-->
<select id="selectSubUser" resultType="productVo">
    SELECT
        MP.PRODUCT_NUMBER,
        MP.PRODUCT_NAME,
        COUNT(MS.USER_NUMBER) AS USER_NUMBER_COUNT
    FROM
        MONTHLY_USER MU
            JOIN MONTHLY_SUBSCRIBE MS ON MU.USER_NUMBER = MS.USER_NUMBER
            JOIN MONTHLY_PRODUCT MP ON MS.PRODUCT_NUMBER = MP.PRODUCT_NUMBER
            JOIN MONTHLY_BRAND MB ON MP.BRAND_NUMBER = MB.BRAND_NUMBER
            JOIN MONTHLY_SELLER MSN ON MB.SELLER_NUMBER = MSN.SELLER_NUMBER
    WHERE
        MSN.SELLER_NUMBER = #{sellerNumber}
    GROUP BY
        MP.PRODUCT_NUMBER,
        MP.PRODUCT_NAME
</select>







    <!--판매자 상태 수정 기능-->
    <update id="update">
        UPDATE MONTHLY_SELLER
        SET  SELLER_STATUS = #{sellerStatus}
        WHERE SELLER_NUMBER = #{sellerNumber}
    </update>

    <!--상품 상태 수정 기능-->
    <update id="updateProduct">
        UPDATE MONTHLY_PRODUCT
        SET  PRODUCT_STATUS = #{productStatus}
        WHERE PRODUCT_NUMBER = #{productNumber}
    </update>

    <select id="getSellerStatusByDate" resultType="adminChartVo">
        SELECT TO_CHAR(m.BRAND_REGISTER_DATE, 'MM-DD') AS BRAND_REGISTER_DATE, COUNT(CASE WHEN s.SELLER_STATUS = 1 THEN 1 END) AS SELLER_STATUS_ONE_COUNT, COUNT(CASE WHEN s.SELLER_STATUS = 2 THEN 1 END) AS SELLER_STATUS_TWO_COUNT
        FROM MONTHLY_BRAND m
                 JOIN MONTHLY_SELLER s ON m.SELLER_NUMBER = s.SELLER_NUMBER
        WHERE m.BRAND_REGISTER_DATE >= TRUNC(SYSDATE) - 2
        GROUP BY TO_CHAR(m.BRAND_REGISTER_DATE, 'MM-DD')
        ORDER BY TO_CHAR(m.BRAND_REGISTER_DATE, 'MM-DD')
    </select>

<select id="sellerMonth" resultType="adminChartVo">
    SELECT
        COUNT(CASE WHEN s.SELLER_STATUS = 1 THEN 1 END) AS SELLER_STATUS_ONE_COUNT,
        COUNT(CASE WHEN s.SELLER_STATUS = 2 THEN 1 END) AS SELLER_STATUS_TWO_COUNT
    FROM
        MONTHLY_BRAND m
            JOIN
        MONTHLY_SELLER s ON m.SELLER_NUMBER = s.SELLER_NUMBER
    WHERE
            TO_CHAR(m.BRAND_REGISTER_DATE, 'YYYY-MM') = TO_CHAR(SYSDATE, 'YYYY-MM')
</select>

<select id="threeAverage" resultType="adminChartVo">
    SELECT TO_CHAR(ROUND(COUNT(CASE WHEN s.SELLER_STATUS = 1 THEN 1 END) / 3, 2), 'FM9999999990.00') AS SELLER_STATUS_ONE_COUNT,
           TO_CHAR(ROUND(COUNT(CASE WHEN s.SELLER_STATUS = 2 THEN 1 END) / 3, 2), 'FM9999999990.00') AS SELLER_STATUS_TWO_COUNT
    FROM MONTHLY_BRAND m
             JOIN MONTHLY_SELLER s ON m.SELLER_NUMBER = s.SELLER_NUMBER
    WHERE m.BRAND_REGISTER_DATE >= TRUNC(ADD_MONTHS(SYSDATE, -3), 'MM')
</select>




</mapper>







